"""Initial migration

Revision ID: c40448a7e3c4
Revises: 
Create Date: 2024-08-11 17:06:40.828546

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import table, column
from sqlalchemy.engine.reflection import Inspector

# revision identifiers, used by Alembic.
revision = 'c40448a7e3c4'
down_revision = None
branch_labels = None
depends_on = None

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    inspector = Inspector.from_engine(conn)
    columns = inspector.get_columns('ticket')
    existing_columns = [c["name"] for c in columns]

    with op.batch_alter_table('ticket', schema=None) as batch_op:
        if 'priority' not in existing_columns:
            batch_op.add_column(sa.Column('priority', sa.String(length=20), nullable=True))
        if 'category' not in existing_columns:
            batch_op.add_column(sa.Column('category', sa.String(length=50), nullable=True))
        if 'assigned_to' not in existing_columns:
            batch_op.add_column(sa.Column('assigned_to', sa.String(length=100), nullable=True))
        if 'requester_name' not in existing_columns:
            batch_op.add_column(sa.Column('requester_name', sa.String(length=100), nullable=True))
        if 'requester_email' not in existing_columns:
            batch_op.add_column(sa.Column('requester_email', sa.String(length=120), nullable=True))
        if 'updated_at' not in existing_columns:
            batch_op.add_column(sa.Column('updated_at', sa.DateTime(), nullable=True))

    # Set default values for new columns
    ticket_table = table('ticket',
        column('priority', sa.String),
        column('requester_name', sa.String),
        column('requester_email', sa.String),
        column('updated_at', sa.DateTime)
    )
    op.execute(ticket_table.update().values(
        priority=sa.case((ticket_table.c.priority.is_(None), 'Medium'), else_=ticket_table.c.priority),
        requester_name=sa.case((ticket_table.c.requester_name.is_(None), 'Unknown'), else_=ticket_table.c.requester_name),
        requester_email=sa.case((ticket_table.c.requester_email.is_(None), 'unknown@example.com'), else_=ticket_table.c.requester_email),
        updated_at=sa.case((ticket_table.c.updated_at.is_(None), sa.func.now()), else_=ticket_table.c.updated_at)
    ).where(
        sa.or_(
            ticket_table.c.priority.is_(None),
            ticket_table.c.requester_name.is_(None),
            ticket_table.c.requester_email.is_(None),
            ticket_table.c.updated_at.is_(None)
        )
    ))

    # Set NOT NULL constraint after setting default values
    with op.batch_alter_table('ticket', schema=None) as batch_op:
        batch_op.alter_column('requester_name', nullable=False)
        batch_op.alter_column('requester_email', nullable=False)

    # ### end Alembic commands ###

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('ticket', schema=None) as batch_op:
        batch_op.drop_column('updated_at')
        batch_op.drop_column('requester_email')
        batch_op.drop_column('requester_name')
        batch_op.drop_column('assigned_to')
        batch_op.drop_column('category')
        batch_op.drop_column('priority')

    # ### end Alembic commands ###
